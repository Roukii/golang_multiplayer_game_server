syntax = "proto3";

option go_package = "github.com/Roukii/pock_multiplayer/universe";
import "google/protobuf/empty.proto";

package universe;

// CHUNK SERVICE 
service ChunkService {
    rpc EnterChunk (EnterChunkRequest) returns (EnterChunkResponse) {}
    rpc LoadChunk (LoadChunkRequest) returns (LoadChunkResponse) {}
    rpc Stream (ChunkStreamRequest) returns (stream ChunkStreamResponse) {}
}


message LoadChunkRequest {
    int32 viewDistance = 1;
}

message LoadChunkResponse {
    repeated Chunk chunks = 3;
    repeated DynamicEntity dynamicEntity = 4;
}

message EnterChunkRequest {
    string chunkUuid = 1;
    int32 viewDistance = 2;
}

message EnterChunkResponse {
    repeated Chunk chunks = 1;
    repeated DynamicEntity dynamicEntity = 2;
}


message ChunkStreamRequest {
    oneof action {
        InteractWithStaticEntity interactWithStaticEntity = 1;
        PlaceStaticEntity placeStaticEntity = 2;
    }
}

message ChunkStreamResponse {
    oneof action {
        AddStaticEntity addStaticEntity = 1;
        UpdateStaticEntity updateStaticEntity = 2;
        RemoveStaticEntity removeStaticEntity = 3;
    }
}

message RemoveStaticEntity {
    string entityUuid = 1;
}

message InteractWithStaticEntity {
    string staticEntityUuid = 1;
}

message PlaceStaticEntity {
    string staticEntityUuid = 1;
}

message AddStaticEntity {
    StaticEntity entity = 1;
}

message UpdateStaticEntity {
    StaticEntity entity = 1;
}

// END CHUNK SERVICE 


// PLAYER SERVICE 

service PlayerService {
    rpc CreatePlayer(CreatePlayerRequest) returns (CreatePlayerResponse) {}
    rpc GetPlayers(google.protobuf.Empty) returns (GetPlayersReply) {}
    rpc Connect(ConnectRequest) returns (ConnectResponse) {}
    rpc Stream (stream PlayerStreamRequest) returns (stream PlayerStreamResponse) {}
}

message CreatePlayerRequest {
    string name = 1;
}

message CreatePlayerResponse {
    Player player = 1;
    World world = 2;
    repeated Chunk chunks = 3;
    repeated DynamicEntity dynamicEntity = 4;
}

message GetPlayersReply {
    repeated Player player = 1;
}

message PlayerStreamRequest {
  oneof action {
    Move move = 1;
    Attack attack = 2;
    Interact interact = 3;
    UseSkill skill = 4;
    Hit hit = 5;
    PlayerDisconnect disconnect = 6;

  }
}

message PlayerStreamResponse {
  string uuid = 1;
  oneof info {
    DynamicEntityType dynamicEntity = 2;
    StaticEntityType staticEntity = 3;
  }
  oneof action {
    Move move = 4;
    DynamicEntity addEntity = 5;
    bool deleteEntity = 6;
    Hit hit = 7;
    Attack attack = 8;
    UseSkill skill = 9;
    PlayerDisconnect disconnect = 10;
    PlayerConnect connect = 11;
    Interact interact = 12;
  }
}

message PlayerDisconnect {
  string message = 1;
}

message PlayerConnect {
  Player player = 1;
}

message Hit {
  int64 damage = 1;
  int64 hpLeft = 2;
  Vector3 position = 3;
  repeated string dynamicEntityUUID = 4;
  repeated string staticEntityUUID = 5;
  string skillId = 6;
}

message Interact {
  string uuid = 1;
  oneof info {
    DynamicEntityType dynamicEntity = 2;
    StaticEntityType staticEntity = 3;
  }
}

message Attack {
  repeated string dynamicEntityUUID = 1;
  repeated string staticEntityUUID = 2;
  Vector3 angle = 3;
}

message UseSkill {
  optional Vector3 position = 1;
  optional Vector3 angle = 2;
  Skill skill = 3;
  string id = 4;
}

message Skill {
    string skillUuid = 1;
}

message ConnectRequest {
    string playerUuid = 1;
}

message ConnectResponse {
    Player player = 1;
    World world = 2;
    repeated Chunk chunks = 3;
    repeated DynamicEntity dynamicEntity = 4;
}

message Player {
  string name = 1;
  string uuid = 2;
  int32 level = 3;
  Position position = 4;
}

message World {
    string name = 1;
    int32 level = 2;
    int32 length = 3;
    int32 width = 4;
    int32 scaleXY = 5;
    int32 scaleHeight = 6;
    string seed = 7;
    int32 chunk_width = 8;
    int32 population = 9;
}

message Move {
  Position position = 2;
  bool jump = 3;
}

message Chunk {
    string uuid = 1;
    Vector2Int position = 2;
    repeated StaticEntity staticEntity = 3;
    repeated Tile tiles = 4;
}

message Tile {
    TileType type = 1;
    float elevation = 2;
}

enum TileType {
  Dirt = 0;
	Grass = 1;
	Rock = 2;
	Forest = 3;
	Sand = 4;
	Snow = 5;
}

// COORDINATE MESSAGES
message Position {
    optional Vector3 position = 1;
    optional Vector3 angle = 2;
}

message Vector3 {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Vector2 {
    float x = 1;
    float y = 2;
}

message Vector2Int {
  int32 x = 1;
  int32 y = 2;
}

// DynamicEntity
message DynamicEntity {
    string uuid = 1;
    string name = 2;
    Position position = 3;
    DynamicEntityType type = 4;
    // Stats stats
}

enum DynamicEntityType {
    PLAYER = 0;
    CREATURE = 1;
}
//END DynamicEntity

// StaticEntity
message StaticEntity {
    string uuid = 1;
    string name = 2;
    Position position = 3;
    StaticEntityType type = 4;
    // Stats stats
}

enum StaticEntityType {
	Empty = 0;
	Building = 1;
	ChunkEntry = 2;
	Ressource = 3;
	Item = 4;
}
//END StaticEntity
